using System.Numerics;
using NUnit.Framework;
using SpiceSharp;
using SpiceSharp.Components;
using SpiceSharp.Simulations;

namespace SpiceSharpTest.Models
{
    [TestFixture]
    public class BSIM1Tests : Framework
    {
        /// <summary>
        /// Generate a BSIM1 transistor
        /// </summary>
        private BSIM1 CreateMosfet(string name, string drain, string gate, string source, string bulk, double w, double l, string model)
        {
            // Create the device
            var e = new BSIM1(name, drain, gate, source, bulk);
            e.SetParameter("w", w);
            e.SetParameter("l", l);
            e.Model = model;
            return e;
        }

        private BSIM1Model CreateModel(string name, string parameters)
        {
            var m = new BSIM1Model(name);
            ApplyParameters(m, parameters);
            return m;
        }

        [Test]
        public void When_BSIM1DC_Expect_Reference()
        {
            var ckt = new Circuit(
                new VoltageSource("V1", "g", "0", 0.0),
                new VoltageSource("V2", "d", "0", 0.0),
                CreateMosfet("M1", "d", "g", "0", "0", 100e-6, 100e-6, "mod"),
                CreateModel("mod", "temp=25 muz=600 vdd=5 vfb=-0.3 phi=0.6 k1=0.5 u0=670 x2e=-0.07 mus=1082 n0=0.5 tox=1e-7 mj=0.5 mjsw=0.33 pb=0.8 pbsw=1.0 xpart=1.0")
            );
            ckt["M1"].SetParameter("m", 2.0);

            // Create simulation
            var dc = new DC("dc", new[]
            {
                new SweepConfiguration("V1", 0, 3.3, 0.3),
                new SweepConfiguration("V2", 0, 3.3, 0.3),
            });

            // Create exports
            Export<double>[] exports = { new RealPropertyExport(dc, "V2", "i") };

            // Create references
            double[][] references =
            {
                new[]
                {
                    0.000000000000000e+00, -6.115990503454295e-13, -1.223198100690164e-12, -1.834797151034898e-12,
                    -2.446396201379632e-12, -3.057995251724366e-12, -3.669594302069101e-12, -4.281193352413835e-12,
                    -4.892792402758570e-12, -5.504391453103303e-12, -6.115990503448037e-12, -6.727589553792770e-12,
                    0.000000000000000e+00, -6.198585106827036e-13, -1.231457636806306e-12, -1.843056687151735e-12,
                    -2.454655737496469e-12, -3.066254787841203e-12, -3.677853838185937e-12, -4.289452888530672e-12,
                    -4.901051938875407e-12, -5.512650989220140e-12, -6.124250039564874e-12, -6.735849089909607e-12,
                    0.000000000000000e+00, -9.796615725994866e-05, -9.796705527923000e-05, -9.796705589906231e-05,
                    -9.796705651066162e-05, -9.796705712226007e-05, -9.796705773385938e-05, -9.796705834545869e-05,
                    -9.796705895705800e-05, -9.796705956865645e-05, -9.796706018025576e-05, -9.796706079185508e-05,
                    0.000000000000000e+00, -6.539624815788309e-02, -6.563922636615803e-02, -6.586618403323974e-02,
                    -6.607712115915883e-02, -6.627203774391535e-02, -6.645093378750928e-02, -6.661380928994061e-02,
                    -6.676066425120933e-02, -6.689149867131547e-02, -6.700631255025902e-02, -6.710510588803995e-02,
                    0.000000000000000e+00, -6.899310733790234e-02, -7.028612089627542e-02, -7.083542528641447e-02,
                    -7.134595524905743e-02, -7.181771078420435e-02, -7.225069189185521e-02, -7.264489857201004e-02,
                    -7.300033082466878e-02, -7.331698864983148e-02, -7.359487204749815e-02, -7.383398101766872e-02,
                    0.000000000000000e+00, -7.028954468945252e-02, -7.472221899293749e-02, -7.580473727181125e-02,
                    -7.661486453676924e-02, -7.736346314873890e-02, -7.805053310772024e-02, -7.867607441371324e-02,
                    -7.924008706671790e-02, -7.974257106673423e-02, -8.018352641376222e-02, -8.056295310780189e-02,
                    0.000000000000000e+00, -7.088784305495319e-02, -7.729658328254621e-02, -8.073453124024327e-02,
                    -8.188378892210493e-02, -8.290923140416830e-02, -8.385039094255067e-02, -8.470726753725211e-02,
                    -8.547986118827255e-02, -8.616817189561207e-02, -8.677219965927059e-02, -8.729194447924815e-02,
                    0.000000000000000e+00, -7.123230144669572e-02, -7.877872235243322e-02, -8.429567941832759e-02,
                    -8.715271879686397e-02, -8.845500543745052e-02, -8.965025481995692e-02, -9.073846694438321e-02,
                    -9.171964181072934e-02, -9.259377941899535e-02, -9.336087976918125e-02, -9.402094286128698e-02,
                    0.000000000000000e+00, -7.145619296525618e-02, -7.974208505466286e-02, -8.661035919540212e-02,
                    -9.151267852130958e-02, -9.400078221505090e-02, -9.545012156741731e-02, -9.676966933604449e-02,
                    -9.795942552093242e-02, -9.901939012208111e-02, -9.994956313949060e-02, -1.007499445731608e-01,
                    0.000000000000000e+00, -7.161339036318184e-02, -8.041847561658694e-02, -8.823552856459835e-02,
                    -9.457390796181607e-02, -9.899950815291927e-02, -1.012499899025089e-01, -1.028008733786619e-01,
                    -1.041992109391878e-01, -1.054450025840867e-01, -1.065382483133586e-01, -1.074789481270034e-01,
                    0.000000000000000e+00, -7.172983126856870e-02, -8.091949872806875e-02, -8.943934106565310e-02,
                    -9.684145394128597e-02, -1.027271396276052e-01, -1.067469070099220e-01, -1.088320784301715e-01,
                    -1.104389974012266e-01, -1.118706161209607e-01, -1.131269345893736e-01, -1.142079528064653e-01,
                    0.000000000000000e+00, -7.181954709623940e-02, -8.130552890345601e-02, -9.036685905886724e-02,
                    -9.858856131436600e-02, -1.055992191763829e-01, -1.110709759058865e-01, -1.147195345183828e-01,
                    -1.166787845477011e-01, -1.182962303626534e-01, -1.197156215880946e-01, -1.209369582240246e-01
                }
            };
            for (var i = 0; i < references[0].Length; i++)
                references[0][i] *= 2.0; // Multiplier effect

            // Run simulation
            AnalyzeDC(dc, ckt, exports, references);
        }

        [Test]
        public void When_BSIM1Transient_Expect_Reference()
        {
            /*
             * NOTE: Spice 3f5 BSIM1 does not correctly register xpart=1. This was modified manually
             * in the debugger for simulating the reference.
             */

            // Build the circuit
            var ckt = new Circuit(
                new VoltageSource("Vsupply", "vdd", "0", 3.3),
                new VoltageSource("V1", "in", "0", new Pulse(0, 3.3, 1e-6, 1e-9, 0.5e-6, 2e-6, 6e-6)),
                new Resistor("R1", "vdd", "out", 10.0e3),
                new Capacitor("C1", "out", "0", 1e-7),
                CreateMosfet("M1", "out", "in", "0", "0", 100e-6, 100e-6, "Nch4"),
                CreateModel("Nch4", "temp=25 muz=600 vdd=5 vfb=-0.3 phi=0.6 k1=0.5 u0=670 x2e=-0.07 mus=1082 n0=0.5 tox=1e-7 mj=0.5 mjsw=0.33 pb=0.8 pbsw=1.0 xpart=0")
            );

            // Create the simulation and exports
            var tran = new Transient("Transient", 1e-9, 9e-6);
            tran.BeforeTemperature += (sender, data) =>
            {
                // Swap columns and rows in the matrix
                var sim = (BaseSimulation) sender;
                var state = sim.RealState;

                // Move "out" to the first spot
                var index = sim.Variables.GetNode("out").Index;
                var node = state.Solver.GetMatrixElement(index, index);
                state.Solver.MovePivot(node, 1);

                // Move "in" to the second spot
                index = sim.Variables.GetNode("in").Index;
                node = state.Solver.GetMatrixElement(index, index);
                state.Solver.MovePivot(node, 2);

                // Move "vdd" node to the third spot
                index = sim.Variables.GetNode("vdd").Index;
                node = state.Solver.GetMatrixElement(index, index);
                state.Solver.MovePivot(node, 3);
            };

            // Create exports
            Export<double>[] exports =
                {new GenericExport<double>(tran, () => tran.Method.Time), new RealVoltageExport(tran, "out")};

            // Create references
            double[][] references =
            {
                new[]
                {
                    0.000000000000000e+00, 1.000000000000000e-11, 2.000000000000000e-11, 4.000000000000000e-11,
                    8.000000000000001e-11, 1.600000000000000e-10, 3.200000000000000e-10, 6.400000000000001e-10,
                    1.280000000000000e-09, 2.560000000000000e-09, 5.120000000000001e-09, 1.024000000000000e-08,
                    2.048000000000000e-08, 4.096000000000000e-08, 8.192000000000001e-08, 1.638400000000000e-07,
                    3.276800000000000e-07, 5.076800000000000e-07, 6.876800000000000e-07, 8.676799999999999e-07,
                    1.000000000000000e-06, 1.000100000000000e-06, 1.000300000000000e-06, 1.000528235231905e-06,
                    1.000812072750154e-06, 1.001000000000000e-06, 1.001031725709194e-06, 1.001095177127582e-06,
                    1.001222079964357e-06, 1.001475885637909e-06, 1.001983496985011e-06, 1.002998719679216e-06,
                    1.005029165067626e-06, 1.009090055844446e-06, 1.017211837398087e-06, 1.033455400505367e-06,
                    1.065942526719929e-06, 1.130916779149051e-06, 1.260865284007296e-06, 1.440865284007296e-06,
                    1.620865284007296e-06, 1.800865284007296e-06, 1.980865284007296e-06, 2.160865284007296e-06,
                    2.340865284007296e-06, 2.520865284007296e-06, 2.700865284007296e-06, 2.880865284007296e-06,
                    3.001000000000000e-06, 3.019000000000000e-06, 3.055000000000000e-06, 3.127000000000000e-06,
                    3.271000000000000e-06, 3.451000000000000e-06, 3.501000000000000e-06, 3.505046551280623e-06,
                    3.513139653841870e-06, 3.529325858964364e-06, 3.561698269209352e-06, 3.626443089699328e-06,
                    3.755932730679279e-06, 3.935932730679280e-06, 4.115932730679280e-06, 4.295932730679280e-06,
                    4.475932730679279e-06, 4.655932730679279e-06, 4.835932730679279e-06, 5.015932730679279e-06,
                    5.195932730679279e-06, 5.375932730679279e-06, 5.555932730679279e-06, 5.735932730679279e-06,
                    5.915932730679279e-06, 6.095932730679279e-06, 6.275932730679279e-06, 6.455932730679279e-06,
                    6.635932730679279e-06, 6.815932730679279e-06, 6.995932730679279e-06, 7.000000000000000e-06,
                    7.000100000000000e-06, 7.000300000000000e-06, 7.000528235231903e-06, 7.000812072750151e-06,
                    7.001000000000000e-06, 7.001031725709193e-06, 7.001095177127580e-06, 7.001222079964356e-06,
                    7.001475885637905e-06, 7.001983496985005e-06, 7.002998719679204e-06, 7.005029165067602e-06,
                    7.009090055844399e-06, 7.017211837397992e-06, 7.033455400505178e-06, 7.065942526719549e-06,
                    7.130916779148293e-06, 7.260865284005781e-06, 7.440865284005781e-06, 7.620865284005781e-06,
                    7.800865284005781e-06, 7.980865284005781e-06, 8.160865284005781e-06, 8.340865284005781e-06,
                    8.520865284005781e-06, 8.700865284005781e-06, 8.880865284005781e-06, 9.000000000000000e-06
                },
                new[]
                {
                    3.299999932724107e+00, 3.299999932724107e+00, 3.299999932724107e+00, 3.299999932724107e+00,
                    3.299999932724107e+00, 3.299999932724106e+00, 3.299999932724103e+00, 3.299999932724100e+00,
                    3.299999932724101e+00, 3.299999932724103e+00, 3.299999932724102e+00, 3.299999932724102e+00,
                    3.299999932724101e+00, 3.299999932724103e+00, 3.299999932724104e+00, 3.299999932724104e+00,
                    3.299999932724102e+00, 3.299999932724102e+00, 3.299999932724101e+00, 3.299999932724101e+00,
                    3.299999932724101e+00, 3.299999932724100e+00, 6.087206695344316e+00, 1.302227200419934e+01,
                    2.164678915604327e+01, 2.735698277884406e+01, 2.735693445243249e+01, 2.735685417209633e+01,
                    2.735669361143929e+01, 2.735637249018633e+01, 2.735573024792491e+01, 2.735444576438007e+01,
                    2.735187680120249e+01, 2.734673889049571e+01, 2.733646313167539e+01, 2.731591186440514e+01,
                    2.727481033132576e+01, 2.719261127084904e+01, 2.702822917132242e+01, 2.680056827702503e+01,
                    2.657294835800151e+01, 2.634536940687716e+01, 2.611783141627841e+01, 2.589033437883300e+01,
                    2.566287828717006e+01, 2.543546313391999e+01, 2.520808891171457e+01, 2.498075561318683e+01,
                    2.482905270725553e+01, 2.371293952858693e+01, 2.148176470134729e+01, 1.702572399968151e+01,
                    8.138876120776226e+00, 4.158204523782711e-01, 4.159646577482515e-01, 4.159763280979001e-01,
                    4.159996687027483e-01, 4.160463493457555e-01, 4.161397083650591e-01, 4.163264173371904e-01,
                    4.166997990184834e-01, 4.172187463478710e-01, 4.177376002751438e-01, 4.182563608171124e-01,
                    4.187750279905849e-01, 4.192936018123657e-01, 4.198120822992569e-01, 4.203304694680574e-01,
                    4.208487633355625e-01, 4.213669639185653e-01, 4.218850712338553e-01, 4.224030852982193e-01,
                    4.229210061284409e-01, 4.234388337413006e-01, 4.239565681535760e-01, 4.244742093820419e-01,
                    4.249917574434700e-01, 4.255092123546286e-01, 4.260265741322831e-01, 4.260382633324204e-01,
                    4.260385507285643e-01, 3.213246696257325e+00, 1.014831239928257e+01, 1.877283036681891e+01,
                    2.448302737786551e+01, 2.448298027717206e+01, 2.448287227665717e+01, 2.448271208071657e+01,
                    2.448239168889635e+01, 2.448175090549983e+01, 2.448046933968263e+01, 2.447790621195142e+01,
                    2.447277997210188e+01, 2.446252755485383e+01, 2.444202297015940e+01, 2.440101479995688e+01,
                    2.431900245613486e+01, 2.415499375352464e+01, 2.392784999507078e+01, 2.370074711881474e+01,
                    2.347368511739851e+01, 2.324666398346531e+01, 2.301968370965962e+01, 2.279274428862730e+01,
                    2.256584571301553e+01, 2.233898797547275e+01, 2.211217106864880e+01, 2.196207258840766e+01
                }
            };

            // Run
            AnalyzeTransient(tran, ckt, exports, references);
        }

        [Test]
        public void When_BSIM1SmallSignal_Expect_Reference()
        {
            // Build the circuit
            var ckt = new Circuit(
                new VoltageSource("Vsupply", "vdd", "0", 3.3),
                new VoltageSource("V1", "in", "0", 0.0),
                new Resistor("R1", "vdd", "out", 10.0e3),
                new Resistor("R2", "out", "g", 1.0e6),
                new Capacitor("C1", "in", "g", 1e-9),
                CreateMosfet("M1", "out", "g", "0", "0", 100e-6, 100e-6, "Nch4"),
                CreateModel("Nch4", "VFB=-7.744e-1 K1=1.112 K2=2.051e-1 ETA=1.185e-2 MUZ=8.052e2 U0=6.757e-2 U1=6.443e-1 X2MZ=3.213e1 X2E=2.670e-3 X3E=1.046e-3 X2U0=1.055e-2 X2U1=-3.186e-2 MUS=1.293e3 X2MS=3.737e1 X3MS=1.374e2 X3U1=1.489e-1 PHI=7.5 TOX=4e-2 VDD=5 DL=0 DW=0 CGDO=3.41e-10 CGSO=3.41e-10 CGBO=5.51e-10")
            );
            ckt["V1"].SetParameter("acmag", 1.0);

            // AC simulation
            var ac = new AC("ac 1", new DecadeSweep(0.1, 1.0e9, 20));

            // Create exports
            var exports = new Export<Complex>[] { new ComplexVoltageExport(ac, "out") };

            // Reference
            var riref = new[]
            {
                3.996814903442841e-09, 6.283182699407280e-06, 5.031691320968790e-09, 7.049846201838142e-06,
                6.334523232695595e-09, 7.910056495085708e-06, 7.974690944942418e-09, 8.875227888262237e-06,
                1.003953898292180e-08, 9.958167394975631e-06, 1.263902742181355e-08, 1.117324464758557e-05,
                1.591158752956431e-08, 1.253658253530886e-05, 2.003149352721469e-08, 1.406627109122537e-05,
                2.521814299465643e-08, 1.578260745983651e-05, 3.174774006560430e-08, 1.770836512022087e-05,
                3.996800347094158e-08, 1.986909592424887e-05, 5.031668250737449e-08, 2.229346893940565e-05,
                6.334486668896049e-08, 2.501365056659166e-05, 7.974632995331286e-08, 2.806573094029311e-05,
                1.003944713918882e-07, 3.149020221758174e-05, 1.263888185972781e-07, 3.533249502964759e-05,
                1.591135683004636e-07, 3.964358011128280e-05, 2.003112789479687e-07, 4.448064294613851e-05,
                2.521756350967384e-07, 4.990784017447425e-05, 3.174682165047901e-07, 5.599714751035252e-05,
                3.996654789438726e-07, 6.282931000988331e-05, 5.031437560059007e-07, 7.049490672133746e-05,
                6.334121054115020e-07, 7.909554302720265e-05, 7.974053545537921e-07, 8.874518534588197e-05,
                1.003852879427331e-06, 9.957165427433629e-05, 1.263742642325553e-06, 1.117182936843170e-04,
                1.590905020275005e-06, 1.253458346725871e-04, 2.002747230460779e-06, 1.406344745149192e-04,
                2.521177012426312e-06, 1.577861917419206e-04, 3.173764042090396e-06, 1.770273189305584e-04,
                3.995199795781958e-06, 1.986113944799667e-04, 5.029131816172874e-06, 2.228223130673878e-04,
                6.330467226252323e-06, 2.499777910198841e-04, 7.968263675655605e-06, 2.804331565784088e-04,
                1.002935457715359e-05, 3.145854646837064e-04, 1.262289047349009e-05, 3.528779196660026e-04,
                1.588602065896392e-05, 3.958045645417690e-04, 1.999098965319164e-05, 4.439151590029338e-04,
                2.515398233907608e-05, 4.978201148059958e-04, 3.164611935773100e-05, 5.581952805762875e-04,
                3.980707914271458e-05, 6.257862592455797e-04, 5.006190078293724e-05, 7.014117888608367e-04,
                6.294159465427240e-05, 7.859655064621144e-04, 7.910824078822390e-05, 8.804151266896016e-04,
                9.938526329049513e-05, 9.857976801204663e-04, 1.247934922751107e-04, 1.103208948002203e-03,
                1.565933996415804e-04, 1.233784579950338e-03, 1.963334272311174e-04, 1.378669581268984e-03,
                2.459034807413662e-04, 1.538971927685854e-03, 3.075912591135570e-04, 1.715695086014580e-03,
                3.841369038158617e-04, 1.909643371156625e-03, 4.787782498006574e-04, 2.121293702261442e-03,
                5.952745697213606e-04, 2.350628030242418e-03, 7.378911811867685e-04, 2.596923409760388e-03,
                9.113211930336277e-04, 2.858502617015065e-03, 1.120515464967104e-03, 3.132458746546358e-03,
                1.370390352190502e-03, 3.414383331658749e-03, 1.665389348939422e-03, 3.698148718738067e-03,
                2.008894616735940e-03, 3.975818084137604e-03, 2.402521662696692e-03, 4.237772315565696e-03,
                2.845383895278624e-03, 4.473138875339172e-03, 3.333471895855069e-03, 4.670569382802412e-03,
                3.859330849272018e-03, 4.819333174584222e-03, 4.412207724436485e-03, 4.910585713529057e-03,
                4.978756493390833e-03, 4.938570511469664e-03, 5.544244971946772e-03, 4.901472788486817e-03,
                6.094050251889143e-03, 4.801699904938408e-03, 6.615130890460238e-03, 4.645510709852696e-03,
                7.097172188920147e-03, 4.442096313667192e-03, 7.533211842900315e-03, 4.202351570234303e-03,
                7.919712335237156e-03, 3.937618726253254e-03, 8.256184595512908e-03, 3.658632783129417e-03,
                8.544540309293075e-03, 3.374793703173185e-03, 8.788353203485489e-03, 3.093784608838703e-03,
                8.992166400786015e-03, 2.821481292028670e-03, 9.160924293411190e-03, 2.562065549186126e-03,
                9.299555806656741e-03, 2.318254498528561e-03, 9.412701217471987e-03, 2.091575541275576e-03,
                9.504557025162560e-03, 1.882639461981795e-03, 9.578808285476824e-03, 1.691384756539837e-03,
                9.638620077343696e-03, 1.517281576880692e-03, 9.686665235456459e-03, 1.359493482243364e-03,
                9.725171557785257e-03, 1.217000572755729e-03, 9.755977076872778e-03, 1.088689930757750e-03,
                9.780586201161868e-03, 9.734198040735865e-04, 9.800222577682595e-03, 8.700634999989217e-04,
                9.815876587147722e-03, 7.775380755553088e-04, 9.828346694114590e-03, 6.948219294675489e-04,
                9.838274656528328e-03, 6.209644878173189e-04, 9.846175025129652e-03, 5.550903964422933e-04,
                9.852459562376707e-03, 4.964000042106223e-04, 9.857457272052695e-03, 4.441674317461931e-04,
                9.861430714004448e-03, 3.977371490852850e-04, 9.864589221396589e-03, 3.565197100733418e-04,
                9.867099563690977e-03, 3.199870898286477e-04, 9.869094520808428e-03, 2.876679263752429e-04,
                9.870679759963181e-03, 2.591428642004923e-04, 9.871939340043025e-03, 2.340401248775275e-04,
                9.872940110447028e-03, 2.120313795731671e-04, 9.873735222027865e-03, 1.928279639628674e-04,
                9.874366926598000e-03, 1.761774531897835e-04, 9.874868807434893e-03, 1.618605996897582e-04,
                9.875267555364378e-03, 1.496886275494462e-04, 9.875584382348765e-03, 1.395008718502131e-04,
                9.875836146180357e-03, 1.311627489558233e-04, 9.876036245114430e-03, 1.245640430687677e-04,
                9.876195329414953e-03, 1.196174950096557e-04, 9.876321867282887e-03, 1.162576806534588e-04,
                9.876422595038110e-03, 1.144401685050191e-04, 9.876502875360330e-03, 1.141409483277360e-04,
                9.876566982560474e-03, 1.153561254341786e-04, 9.876618330007194e-03, 1.181018781334921e-04,
                9.876659651777368e-03, 1.224146788696470e-04, 9.876693148177606e-03, 1.283517827628848e-04,
                9.876720602869283e-03, 1.359919905878078e-04, 9.876743477823935e-03, 1.454366967022460e-04,
                9.876762991158937e-03, 1.568112361081394e-04, 9.876780181994328e-03, 1.702665487141656e-04,
                9.876795965781915e-03, 1.859811830215810e-04, 9.876811183051476e-03, 2.041636659179371e-04,
                9.876826644168954e-03, 2.250552700922862e-04, 9.876843172489371e-03, 2.489332158407899e-04,
                9.876861648202246e-03, 2.761143497805035e-04, 9.876883055204086e-03, 3.069593493059788e-04,
                9.876908533493873e-03, 3.418775085906551e-04, 9.876939439881783e-03, 3.813321696441626e-04,
                9.876977420243903e-03, 4.258468704890322e-04, 9.877024497170742e-03, 4.760122920285054e-04,
                9.877083177677078e-03, 5.324940957664431e-04, 9.877156586708933e-03, 5.960417563501720e-04,
                9.877248633557278e-03, 6.674985060928591e-04, 9.877364220040378e-03, 7.478125233668146e-04,
                9.877509501540888e-03, 8.380495132360661e-04, 9.877692214798322e-03, 9.394068471308143e-04,
                9.877922089912101e-03, 1.053229448997784e-03, 9.878211368494554e-03, 1.181027638456029e-03,
                9.878575455565038e-03, 1.324497167344366e-03, 9.879033739897489e-03, 1.485541714993939e-03,
                9.879610626502297e-03, 1.666298139962606e-03, 9.880336836217030e-03, 1.869164822229987e-03,
                9.881251041599896e-03, 2.096833470416507e-03, 9.882401926221099e-03, 2.352324813941297e-03,
                9.883850776981399e-03, 2.639028650698671e-03, 9.885674747452533e-03, 2.960748777376668e-03,
                9.887970965935590e-03, 3.321753392563425e-03, 9.890861706865999e-03, 3.726831632911344e-03,
                9.894500900738784e-03, 4.181356980485200e-03, 9.899082328878534e-03, 4.691358365616995e-03,
                9.904849938896574e-03, 5.263599884672242e-03, 9.912110829285024e-03, 5.905670156514696e-03,
                9.921251593220961e-03, 6.626082455330190e-03, 9.932758889722865e-03, 7.434386880659969e-03,
                9.947245334122995e-03, 8.341295957254852e-03, 9.965482081031009e-03, 9.358825196085004e-03,
                9.988439826098197e-03, 1.050045029063096e-02, 1.001734039604986e-02, 1.178128276465811e-02,
                1.005372165212173e-02, 1.321826602151410e-02, 1.009951912804213e-02, 1.483039385910906e-02,
                1.015716869431928e-02, 1.663895359200372e-02, 1.022973562776993e-02, 1.866779593723789e-02,
                1.032107681987437e-02, 2.094363373705013e-02, 1.043604454076852e-02, 2.349637135671462e-02,
                1.058074225969483e-02, 2.635946613395531e-02, 1.076284559101225e-02, 2.957032246076146e-02,
                1.099200458084600e-02, 3.317071779795324e-02, 1.128034737248038e-02, 3.720725794594374e-02,
                1.164310988514382e-02, 4.173185592731393e-02, 1.209942158786354e-02, 4.680222447138577e-02,
                1.267328377548426e-02, 5.248236577166902e-02, 1.339478388665573e-02, 5.884303316196902e-02,
                1.430159709178376e-02, 6.596212662533892e-02, 1.544083406022133e-02, 7.392496630747941e-02,
                1.687130041657917e-02, 8.282436380131326e-02, 1.866623702919410e-02, 9.276037790064987e-02,
                2.091660780226317e-02, 1.038395975256645e-01, 2.373498807290950e-02, 1.161737373553587e-01,
                2.726007440872381e-02, 1.298772597569945e-01, 3.166177436932251e-02, 1.450636501365052e-01,
                3.714672706015445e-02, 1.618398761446667e-01, 4.396393185474048e-02, 1.802984661882751e-01,
                5.240990000595712e-02, 2.005065743892698e-01, 6.283237007196467e-02, 2.224914028157169e-01,
                7.563113391848028e-02, 2.462215011271542e-01, 9.125393009640929e-02, 2.715838657319830e-01,
                1.101847677280993e-01, 2.983575491709116e-01, 1.329216500622484e-01, 3.261857945489324e-01,
                1.599408249899467e-01, 3.545505758359113e-01, 1.916458930185149e-01, 3.827556816360379e-01,
                2.283028628561456e-01, 4.099265664197547e-01, 2.699667856101894e-01, 4.350360419036082e-01,
                3.164113804000113e-01, 4.569630493226703e-01, 3.670783439447989e-01, 4.745860158682111e-01,
                4.210649457198421e-01, 4.869027148315664e-01, 4.771641483853274e-01, 4.931574900658255e-01,
                5.339599599247029e-01, 4.929488026196595e-01, 5.899648867686159e-01, 4.862902451294771e-01,
                6.437725145855132e-01, 4.736084335792654e-01, 6.941929622880919e-01, 4.556783646931605e-01,
                7.403449223948336e-01, 4.335137531242954e-01, 7.816921872766344e-01, 4.082395198820888e-01,
                8.180282857883877e-01, 3.809731666152030e-01
            };
            var references = new Complex[1][];
            references[0] = new Complex[riref.Length / 2];
            for (var i = 0; i < riref.Length; i += 2)
                references[0][i / 2] = new Complex(riref[i], riref[i + 1]);

            // Run test
            AnalyzeAC(ac, ckt, exports, references);
        }
        /*
        [Test]
        public void When_BSIM1Netlist_Expect_Parameters()
        {
            // Create the parser
            var parser = new ParserFacade();
            var settings = new ParserSettings();
            settings.SpiceNetlistModelReaderSettings.EvaluatorMode = SpiceEvaluatorMode.Spice3f5;
            settings.SpiceNetlistParserSettings.HasTitle = false;
            settings.SpiceNetlistModelReaderSettings.Context.Models.Add(new MosfetModelGenerator(), true);
            settings.SpiceNetlistModelReaderSettings.Context.Components.Add(new MosfetGenerator(), true);

            var netlist = "M1 d g 0 0 nmodel w=10u l=40u\r\n"
                          + ".model nmodel nmos(level=4 VFB=-7.744e-1 K1=1.112 K2=2.051e-1 ETA=1.185e-2 MUZ=8.052e2 U0=6.757e-2 U1=6.443e-1 X2MZ=3.213e1 X2E=2.670e-3 X3E=1.046e-3 X2U0=1.055e-2 X2U1=-3.186e-2 MUS=1.293e3 X2MS=3.737e1 X3MS=1.374e2 X3U1=1.489e-1 PHI=7.5 TOX=4e-2 VDD=5 DL=0 DW=0 CGDO=3.41e-10 CGSO=3.41e-10 CGBO=5.51e-10)\r\n";
            var result = parser.ParseNetlist(netlist, settings);

            // Find back the model
            var entity = (BSIM1) result.ReaderResult.Circuit.Objects["M1"];
            var model = (BSIM1Model) entity.Model;

            // Check a few component parameters
            Assert.AreEqual(entity.ParameterSets.GetParameter<double>("w"), 10e-6, 1e-12);
            Assert.AreEqual(entity.ParameterSets.GetParameter<double>("l"), 40e-6, 1e-12);

            // Check a few model parameters
            Assert.AreEqual(model.ParameterSets.GetParameter<double>("vfb"), -7.744e-1, 1e-12);
            Assert.AreEqual(model.ParameterSets.GetParameter<double>("muz"), 8.052e2, 1e-12);
        }
        */
    }
}
